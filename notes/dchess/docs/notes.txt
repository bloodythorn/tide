Data Structures
  Move - Moving a single piece from one location to another
    Associations:
      Current Board
      Next Board
  Board - All pieces
    Associations:
      Undos
      Moves

TODO:

  Comparison operators

Top Priorities:

  Logic and State to handle:
    En-Passant
      State information:
        Pawns for each side
          isEnPassantVulnerable?
        This can probably be a single stored pawn for each side, as it will be
          cleared each turn. Queue[2]
    Castling
      State information:
        Rook && King for each side
          Have they moved at all?
    Pawn to ?
      The pawn move masks are going to have to be retooled to remove the last
        movement square (so 7->8 for white, 2->1 for black) to remove this from
        the mask-move engine entirely.

    All three of the above situations are going to have to exist outside of the
      standard mask-move engine as it will require state information to be
      stored as well as special logic to determine a valid move. Because of this
      it will make storing these moves a bit more challenging

  How to store 'moves'
    I'm possibly thinking something polymorphic.

    This might belong here; New idea for storing the actual board. Since we're
      going to need to roll back and forth now and again for AI, wouldn't it
      just make sense for each 'ply'/'turn' to store their own board states?
      How much more memory would this take up? It wouldn't have to be stored to
      disk, but could be generated when the file is read, turn by turn.
    So We wouldn't be storing a single 'board' but a stack of 'moves' each that
      stores its own board state.
    As a requirement, we might want to accommodate it by making a few more copy
      centric functions for the board.